import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:6.7.0'
        classpath 'com.garyclayburg:dockerPreparePlugin:1.4.1'
    }
}

apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin
apply plugin: com.garyclayburg.docker.DockerPreparePlugin
dockerprepare {
    commonService = ['org.springframework.boot:spring-boot-starter-web']
    snapshotLayer = true
}

task buildImage(type: DockerBuildImage, dependsOn: 'dockerLayerPrepare') {
    description = "Package application as Docker image"
    group = "Docker"
    inputDir = project.file(dockerprepare.dockerBuildDirectory)
    images.add('registry:5000/' + rootProject.name + ':latest')
    images.add('registry:5000/' + rootProject.name + ':' + version)

    if (project.hasProperty('dockerhubimage')) {
        println('configure dockerhub images')
        images.add(dockerhubimage + ':' + version)
        images.add(dockerhubimage + ':latest')

    }
//    buildArgs = bootArgMap

}

task pushVersion(type: DockerPushImage, dependsOn: buildImage) {
    description = "docker push <imageName>:<version>"
    images.add(dockerimage + ":" + version)
}

task pushLatest(type: DockerPushImage, dependsOn: buildImage) {
    description = "docker push <imageName>:latest"
    images.add(dockerimage + ":latest")
}

