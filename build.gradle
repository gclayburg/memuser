import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:${asciidoctorVersion}"
        classpath "org.kordamp.gradle:livereload-gradle-plugin:0.2.1"
        classpath 'org.ajoberstar:grgit:1.1.0'
        classpath 'com.bmuschko:gradle-docker-plugin:3.2.0'
    }
}

plugins {
    id 'com.garyclayburg.dockerprepare' version '1.2.1'
    id 'com.gorylenko.gradle-git-properties' version '1.4.17'
//    id 'com.bmuschko.docker-remote-api' version '3.2.0'
    id 'org.springframework.boot' version '1.5.10.RELEASE'
}

apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'application'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'codenarc'
apply plugin: 'org.kordamp.gradle.livereload'
apply plugin: 'com.bmuschko.docker-remote-api'

dockerprepare {
    commonService = ['org.springframework.boot:spring-boot-starter-web']
}
group = "${group}"

jar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

repositories {
    mavenCentral()
    maven {
        url 'https://repo.spring.io/release'
    }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.codehaus.groovy:groovy-all'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile "org.spockframework:spock-spring:${spockVersion}"
    testCompile "org.spockframework:spock-core:${spockVersion}"
    testCompile 'com.jayway.jsonpath:json-path-assert:0.8.1'
    testCompile "org.springframework.restdocs:spring-restdocs-mockmvc:${springRestDocsVersion}"
}

ext {
    snippetsDir = file('target/generated-snippets')
}

apply from: 'gradle/buildinfo.gradle'

processResources {
    inputs.property 'version', version //because ${version} is used as filter in application.properties
    expand(project.properties)
}

gitProperties {
    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    dateFormatTimeZone = "America/Denver"
}

asciidoctor {
    dependsOn test
    sourceDir = file('src/main/asciidoc')
    outputDir 'build/asciidoc'
    inputs.dir snippetsDir
    backends 'html5'
    dependencies {
        asciidoctor 'io.spring.asciidoctor:spring-asciidoctor-extensions:0.1.1.RELEASE'
    }

    attributes 'source-highlighter': 'prettify',
            'imagesdir': 'images',
            'toc': 'left',
            'icons': 'font',
            'setanchors': 'true',
            'idprefix': '',
            'idseparator': '-',
            'docinfo1': 'true',
            'snippets': snippetsDir
}

liveReload {
    description = 'run in a terminal window, view docs in browser http://localhost:35729/html5/index.html'
    docRoot asciidoctor.outputDir.canonicalPath
    dependsOn asciidoctor
}

task cleanTempDir(type: Delete) {
    delete fileTree(dir: 'src/main/resources/public')
}

clean {
    dependsOn cleanTempDir
}

build {
    dependsOn asciidoctor
}

springBoot {
    buildInfo {
        additionalProperties = bootmap
    }
}

task buildImage(type: DockerBuildImage, dependsOn: 'dockerLayerPrepare') {
    description = 'build and tag a Docker Image'
    inputDir = project.file(project.dockerprepare.dockerBuildDirectory)
    tags = [dockerimage + ':' + version, dockerimage + ':latest']

    if (project.hasProperty('dockerhubimage')) {
        println('configure dockerhub images')
        tags.add(dockerhubimage + ':' + version)
        tags.add(dockerhubimage + ':latest')

    }
    println "boot additional: " + bootBuildInfo.getAdditionalProperties()
    buildArgs = bootArgMap
    doFirst {
        println "buildargs used: $buildArgs"
        copy{
            from jar
            into project.dockerprepare.dockerBuildDirectory
        }
    }
}

task pushVersion(type: DockerPushImage, dependsOn: buildImage) {
    description = "docker push <imageName>:<version>"
    imageName = dockerimage + ":" + version
}

task pushLatest(type: DockerPushImage, dependsOn: buildImage) {
    description = "docker push <imageName>:latest"
    imageName = dockerimage + ":latest"
}

/*
java -jar build/libs/memuser-0.5.0.jar

This is simlar to bootRun, except that we are executing the jar file instead of the exploded build dir.
This allows us to include static files like /docs/index.html
 */
task bootJarRun(type: JavaExec) {
    description 'Run the project from generated spring boot jar'
    group 'application'
    dependsOn bootRepackage
    main = "-jar"
    args jar.archivePath.getPath()
}

codenarcMain {
    ignoreFailures true
    configFile file('gradle/codenarc/codenarc.groovy')
}


codenarcTest {
    ignoreFailures true
    configFile file('gradle/codenarc/codenarcTest.groovy')
}

task publish(type: GradleBuild) {
    description "publish generated documentation to github pages"
    dependsOn asciidoctor
    buildFile = file('publish.gradle')
    tasks = ['gitPublishPush']
}

ext['spring-restdocs.version'] = '1.2.1.RELEASE'

/*
gradle continuous build in one terminal:
$ cd dev/memuser
$ ./gradlew --no-daemon -Pbuilddate=unchangeddate asciidoctor -t

enable livereload in another terminal:
$ cd dev/memuser
$ ./gradlew liveReload

in the browser open url http://localhost:35729/html5/index.html
-enable livereload browser plugin


when running from spring boot jar or docker, content available at:
http://localhost:8080/docs/index.html

to view version published on github:
https://gclayburg.github.io/memuser/index.html
 */
