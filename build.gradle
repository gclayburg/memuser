buildscript {
    repositories {
        mavenCentral()
        dependencies {
            classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.+')
        }
    }
    dependencies {
        classpath "org.owasp:dependency-check-gradle:3.1.2"
    }
}

plugins {
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id "org.kordamp.gradle.livereload" version "0.4.0"
    id 'com.gorylenko.gradle-git-properties' version '2.3.2'
    id 'org.springframework.boot' version '2.5.15'
    id "org.sonarqube" version "2.8"
    id 'groovy'
}
apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'codenarc'
apply plugin: 'idea'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'io.spring.dependency-management'

sonarqube {
    properties {
        property "sonar.projectKey", "gclayburg_memuser"
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

jar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

repositories {
    maven {
        url "${artifactory_contexturl}/${artifactory_resolve_repo}"
        allowInsecureProtocol = true
    }
    mavenCentral()
}
configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
    asciidoctorExtensions
}
configurations.all {
    resolutionStrategy.cacheChangingModulesFor 4, 'minutes'  // I want to make sure to try to download the latest snapshot
}
ext {
    snippetsDir = file('build/generated-snippets')
}

ext['springRestDocsVersion'] = '2.0.7.RELEASE'

dependencies {
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    asciidoctorExtensions 'io.spring.asciidoctor:spring-asciidoctor-extensions-spring-boot:0.6.2'
    asciidoctorExtensions 'io.spring.asciidoctor:spring-asciidoctor-extensions-block-switch:0.6.2'
    implementation group: 'com.unboundid.product.scim2', name: 'scim2-sdk-client', version:'2.4.0'
    implementation group: 'com.unboundid.product.scim2', name: 'scim2-sdk-server', version:'2.4.0'
    implementation group: 'javax.ws.rs', name: 'javax.ws.rs-api', version:'2.0.1'
    implementation group: 'org.glassfish.jersey.core', name: 'jersey-client', version:'2.41'
    implementation group: 'org.glassfish.jersey.core', name: 'jersey-common', version:'2.41'
    implementation group: 'com.garyclayburg', name:'upbanner-starter', version: '2.3.3'
    implementation group: 'com.github.oshi', name: 'oshi-core', version: '5.6.0'
    implementation group: 'net.java.dev.jna', name:'jna', version:'5.7.0'
    implementation group: 'net.java.dev.jna', name:'jna-platform', version: '5.7.0'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.codehaus.groovy:groovy-all:3.0.19'
    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude(module: 'spring-boot-starter-tomcat',group: 'org.springframework.boot')
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation('org.springframework.boot:spring-boot-starter-actuator') {
    }
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation 'org.springframework.data:spring-data-commons'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation platform("org.spockframework:spock-bom:2.0-groovy-3.0")
    testImplementation group: 'org.spockframework', name: 'spock-spring', version: '2.0-groovy-3.0'
    testImplementation group: 'org.spockframework', name: 'spock-core', version: '2.0-groovy-3.0'
    testImplementation 'org.spockframework:spock-junit4'
    testImplementation 'junit:junit:4.13.1'

    testImplementation 'com.jayway.jsonpath:json-path-assert:0.8.1'
    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc:${springRestDocsVersion}"

    annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
//    compileOnly 'org.springframework.boot:spring-boot-configuration-processor'

}

test {
    outputs.dir snippetsDir
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

apply from: 'gradle/docker.gradle'

processResources {
    inputs.property 'version', version //because ${version} is used as filter in application.properties
    filesMatching("**/*.properties") {
        expand(project.properties)
    }
}

gitProperties {
    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    dateFormatTimeZone = "America/Denver"
}

asciidoctor {
    dependsOn test
    configurations 'asciidoctorExtensions'
    sourceDir file('src/main/asciidoc')
    outputDir file('build/asciidoc')
    inputs.dir snippetsDir

    attributes 'source-highlighter': 'prettify',
            'imagesdir': 'images',
            'toc': 'left',
            'icons': 'font',
            'setanchors': 'true',
            'idprefix': '',
            'idseparator': '-',
            'docinfo1': 'true',
            'snippets': snippetsDir
}

liveReload {
    description = 'run in a terminal window, view docs in browser http://localhost:35729/index.html'
    println "liveReload on path: $asciidoctor.outputDir.canonicalPath"
    docRoot asciidoctor.outputDir.canonicalPath
    dependsOn asciidoctor
}

task cleanTempDir(type: Delete) {
    delete fileTree(dir: 'src/main/resources/public')
}

clean {
    dependsOn cleanTempDir
}

build {
    dependsOn asciidoctor
}
/*
springBoot {
    buildInfo {
        additionalProperties = bootmap
    }
}
*/

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

/*
java -jar build/libs/memuser-0.5.0.jar

This is similar to bootRun, except that we are executing the jar file instead of the exploded build dir.
This allows us to include static files like /docs/index.html
 */
task bootJarRun(type: JavaExec) {
    description 'Run the project from generated spring boot jar'
    group 'application'
    dependsOn bootJar
    main = "-jar"
    args bootJar.outputs.getFiles().getSingleFile()
}

codenarcMain {
    ignoreFailures true
    configFile file('gradle/codenarc/codenarc.groovy')
}


codenarcTest {
    ignoreFailures true
    configFile file('gradle/codenarc/codenarcTest.groovy')
}

task publish(type: GradleBuild) {
    description "publish generated documentation to github pages"
    dependsOn asciidoctor
    buildFile = file('publish.gradle')
    tasks = ['gitPublishPush']
}


/*
gradle continuous build in one terminal:
$ cd dev/memuser
$ ./gradlew --no-daemon -Pbuilddate=unchangeddate asciidoctor -t

enable livereload in another terminal:
$ cd dev/memuser
$ ./gradlew liveReload

in the browser open url http://localhost:35729/index.html
-enable livereload browser plugin
- now save the *.adoc file and the browser will update automatically as soon as compilation is finished. no need to
  hit refresh in the browser

The created html can also be located in the build without using liveReload:
file:///home/gclaybur/dev/memuser/build/asciidoc/index.html

when running from spring boot jar or docker, content available at:
http://localhost:8080/docs/index.html

to view version published on github:
https://gclayburg.github.io/memuser/index.html
 */
