buildscript {
    repositories {
        jcenter()
        mavenCentral()
        dependencies {
            classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '4.+')
        }
    }
    dependencies {
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:${asciidoctorVersion}"
        classpath "org.kordamp.gradle:livereload-gradle-plugin:0.2.1"
        classpath "org.owasp:dependency-check-gradle:3.1.2"
    }
}

plugins {
    id 'com.gorylenko.gradle-git-properties' version '2.0.0'
    id 'org.springframework.boot' version '1.5.21.RELEASE'
    id "org.sonarqube" version "2.8"
}
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'application'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'codenarc'
apply plugin: 'org.kordamp.gradle.livereload'
apply plugin: 'idea'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'com.jfrog.artifactory'
group = "${group}"

sonarqube {
    properties {
        property "sonar.projectKey", "gclayburg_memuser"
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

jar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

repositories {
    maven {
        url "${artifactory_contexturl}/${artifactory_resolve_repo}"
    }
    mavenCentral()
    mavenLocal()
    maven {
        url 'https://repo.spring.io/release'
    }
}
configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
}
configurations.all {
    resolutionStrategy.cacheChangingModulesFor 4, 'minutes'  // I want to make sure to try to download the latest snapshot
}

dependencies {
    compile group: 'com.garyclayburg', name:'upbanner-starter', version: '2.2.5-SNAPSHOT'
//    compile group: 'com.garyclayburg', name:'upbanner-starter', version: '2.2.4'
    compile group: 'com.github.oshi', name: 'oshi-core', version: '5.6.0'
    compile group: 'net.java.dev.jna', name:'jna', version:'5.7.0'
    compile group: 'net.java.dev.jna', name:'jna-platform', version: '5.7.0'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.codehaus.groovy:groovy-all'
    compile('org.springframework.boot:spring-boot-starter-web') {
        exclude(module: 'spring-boot-starter-tomcat',group: 'org.springframework.boot')
    }
    compile "org.springframework.boot:spring-boot-starter-undertow"
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile('org.springframework.boot:spring-boot-starter-security')
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    compile 'org.springframework.data:spring-data-commons'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile('org.springframework.security:spring-security-test')
    testCompile "org.spockframework:spock-spring:${spockVersion}"
    testCompile "org.spockframework:spock-core:${spockVersion}"
    testCompile 'com.jayway.jsonpath:json-path-assert:0.8.1'
    testCompile "org.springframework.restdocs:spring-restdocs-mockmvc:${springRestDocsVersion}"
}

ext {
    snippetsDir = file('target/generated-snippets')
}

apply from: 'gradle/buildinfo.gradle'
apply from: 'gradle/docker.gradle'

processResources {
    inputs.property 'version', version //because ${version} is used as filter in application.properties
    expand(project.properties)
}

gitProperties {
    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    dateFormatTimeZone = "America/Denver"
}

asciidoctor {
    dependsOn test
    sourceDir = file('src/main/asciidoc')
    outputDir 'build/asciidoc'
    inputs.dir snippetsDir
    backends 'html5'
    dependencies {
        asciidoctor 'io.spring.asciidoctor:spring-asciidoctor-extensions:0.1.1.RELEASE'
    }

    attributes 'source-highlighter': 'prettify',
            'imagesdir': 'images',
            'toc': 'left',
            'icons': 'font',
            'setanchors': 'true',
            'idprefix': '',
            'idseparator': '-',
            'docinfo1': 'true',
            'snippets': snippetsDir
}

liveReload {
    description = 'run in a terminal window, view docs in browser http://localhost:35729/html5/index.html'
    docRoot asciidoctor.outputDir.canonicalPath
    dependsOn asciidoctor
}

task cleanTempDir(type: Delete) {
    delete fileTree(dir: 'src/main/resources/public')
}

clean {
    dependsOn cleanTempDir
}

build {
    dependsOn asciidoctor
}

springBoot {
    buildInfo {
        additionalProperties = bootmap
    }
}

/*
java -jar build/libs/memuser-0.5.0.jar

This is simlar to bootRun, except that we are executing the jar file instead of the exploded build dir.
This allows us to include static files like /docs/index.html
 */
task bootJarRun(type: JavaExec) {
    description 'Run the project from generated spring boot jar'
    group 'application'
    dependsOn bootRepackage
    main = "-jar"
    args jar.archivePath.getPath()
}

codenarcMain {
    ignoreFailures true
    configFile file('gradle/codenarc/codenarc.groovy')
}


codenarcTest {
    ignoreFailures true
    configFile file('gradle/codenarc/codenarcTest.groovy')
}

task publish(type: GradleBuild) {
    description "publish generated documentation to github pages"
    dependsOn asciidoctor
    buildFile = file('publish.gradle')
    tasks = ['gitPublishPush']
}

ext['spring-restdocs.version'] = '1.2.1.RELEASE'

/*
gradle continuous build in one terminal:
$ cd dev/memuser
$ ./gradlew --no-daemon -Pbuilddate=unchangeddate asciidoctor -t

enable livereload in another terminal:
$ cd dev/memuser
$ ./gradlew liveReload

in the browser open url http://localhost:35729/html5/index.html
-enable livereload browser plugin


when running from spring boot jar or docker, content available at:
http://localhost:8080/docs/index.html

to view version published on github:
https://gclayburg.github.io/memuser/index.html
 */
